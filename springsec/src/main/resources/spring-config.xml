<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:b="http://www.springframework.org/schema/beans"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:security="http://www.springframework.org/schema/security"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:p="http://www.springframework.org/schema/p"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:aop="http://www.springframework.org/schema/aop"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xmlns:task="http://www.springframework.org/schema/task"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.1.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 加载配置属性文件 -->
<!--
    <context:property-placeholder ignore-unresolvable="true" location="classpath:constant.properties"/>
-->

    <!-- 开启异步任务（同时开启定时器注解扫描） -->
    <task:annotation-driven />
    <!--对于任意的资源只能允许用户为Role_user这个觉得访问-->
   <!--auto-config="true" 是因为security在初始化的步骤很多，省去了自己的配置
  seurity对用户身份的管理，必须要以ROLE——开头，这是规定
   -->
    <!--<security:http auto-config="true">-->
        <!--<security:intercept-url pattern="/*" access="ROLE_USER"/>-->
    <!--</security:http>-->
    <!--配置用户-->
    <!-- 使用@AspectJ风格的切面声明 -->
    <!-- <aop:aspectj-autoproxy/> -->

    <!-- 使用Annotation自动注册Bean -->
    <!-- 在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解 -->
<!--    <context:component-scan base-package="com.cmf">&lt;!&ndash; base-package 如果多个，用“,”分隔 &ndash;&gt;
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
<security:http>
    &lt;!&ndash;不拦截login.jsp&ndash;&gt;
    <intercept-url pattern="/login.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
&lt;!&ndash;拦截的内容，具备的权限&ndash;&gt;
    <intercept-url pattern="com.cmf" access=""/>
    &lt;!&ndash;设置登录过滤器&ndash;&gt;
    <custom-filter before="FORM_LOGIN_FILTER" ref="authenticationProcessingFilter"/>
    &lt;!&ndash;登录表单设置&ndash;&gt;
    <form-login login-page="/login.jsp"
    default-target-url="/index.jsp"
    authentication-failure-handler-ref="login.jsp?error=true"/>
    &lt;!&ndash;<logout logout-success-url="/login.jsp" delete-cookies="JSESSIOBID"/>&ndash;&gt;

    &lt;!&ndash;sessionc 超时后跳转的页面&ndash;&gt;
    <session-management invalid-session-url="/login.jsp"/>
</security:http>
    <security:authentication-manager alias="authenticationManager">
        <authentication-provider>
            &lt;!&ndash;直接使用sql语句查询登录账号对应权限
              users-by-username-query：查询登录用户是否存在
              authorities-by-username-query:查询登录用户所在组的权限
              &ndash;&gt;
            <jdbc-user-service data-source-ref="dataSource"
                               group-authorities-by-username-query="select g.id,g.groupusername,role.role from t_group as g
                                                                    left outer join t_group_role as drouprole on (g.id=grouprole.groupid
                                                                    left outer join t_role as role on(role.id=grouprole.roleid)
                                                                    left outer join t_group_user as groupuser on(g.id=groupuser.groupid)
                                                                    left outer join t_admin on(t_admin.id=groupuser.userid)
                                                                      where t_admin.nickname=?"
                               users-by-username-query="select t_admin.nickname as username,t_admin.passwd as password,'true' as enabled
                                                        from t_admin where t_admin.nickname=?"
                               authorities-by-username-query="SELECT t_admin.nickname as username,role.role as authorities  from t_admin
                                                                left outer join t_user_role as userrole on(t_admin.id=userrole.userid)
                                                                left outer join t_role as role on(userrole.role.id=role.id) where t_admin.nickname=?"/>
        </authentication-provider>
    </security:authentication-manager>
    &lt;!&ndash; 自定义消息 &ndash;&gt;
    <b:bean id="messageSource"
            class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <b:property name="basename"
                    value="classpath:org/springframework/security/messages" />
    </b:bean>
    &lt;!&ndash;定制登录过滤器&ndash;&gt;
    <beans:bean id="loginSuccesshandler" class="com.cmf.security.LoginSuccessHandler">
        <b:property name="defaultTargetUrl">
            <b:value>/index.jsp</b:value>
        </b:property>
    </beans:bean>
    &lt;!&ndash;配置过滤器&ndash;&gt;
    <beans:bean id="authenticationProcessingFilter" class="com.cmf.security.LoginUsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationSuccessHandler" ref="loginSuccesshandler"/>
        <beans:property name="authenticationFailureHandler" ref="authenticationFailureHandler"></beans:property>
        <beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
    </beans:bean>
    <beans:bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <beans:property name="defaultFailureUrl">
            &lt;!&ndash; 登录失败后转发到该页面 &ndash;&gt;
            <beans:value>/login.jsp?error=true</beans:value>
        </beans:property>
    </beans:bean>-->
        <!-- 引入Mybatis配置 -->
 <!--   <import resource="spring-mybatis.xml"/>-->

    <!-- 引入Socket配置 -->
<!--    <import resource="spring-socket.xml"/>-->

    <!-- 引入MongoDB配置 -->
    <!--<import resource="test/mongo-config.xml"/>-->

    <!-- 引入定时器任务配置 -->
    <!-- <import resource="classpath*:com/demo/config/spring-job.xml"/> -->

    <!-- 引入hibernate4配置 -->
    <!-- <import resource="spring-hibernate.xml"/> -->

    <!-- 引入缓存配置 -->
    <!-- <import resource="spring-cache.xml"/> -->

    <!-- 引入CXF配置 -->
   <!-- <import resource="test/spring-cxf.xml"/>-->

    <!-- 引入Redis配置（无需如此配置，直接使用RedisUtil即可） -->
    <!-- <import resource="test/spring-jedis.xml"/> -->

    !--以上部分可根据自己的需求设定那些事不需要拦截的，然后直接放行就ok了-->
    <http auto-config='true' >
        <!-- 没有权限跳转页面  -->
        <access-denied-handler error-page="/access.jsp" />

        <!--
           校验登陆可访问-->
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <form-login
                login-page="/system/loginpage"
                login-processing-url="/logincheck"
                authentication-failure-handler-ref="failureHandler"
                authentication-success-handler-ref="successHandler"/>
        <logout logout-url="/logout"    logout-success-url="/system/loginpage" />

        <!--session 不做处理-->
        <session-management invalid-session-url="/system/loginpage"  session-fixation-protection="none" >

            <concurrency-control max-sessions="1" error-if-maximum-exceeded="false" expired-url="/system/loginpage" />
        </session-management>
        <!-- 1、注释此过滤器，不再验证是否有访问权限(访问所有资源不再判断是否具有权限)
            2、注释此过滤器，并更改max-sessions="9999",可用一个账号登陆9999次,并且不再验证是否有访问权限(访问所有资源不再判断是否具有权限) -->
        <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR" />

    </http>


    <authentication-manager alias="authManager" erase-credentials="false" >
        <authentication-provider user-service-ref="userServiceDetail">
            <password-encoder ref="passwordEncoder">
            </password-encoder>
        </authentication-provider>
    </authentication-manager>
    <!-- SHA加密方式 -->
    <beans:bean id="passwordEncoder"
                class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />

    <beans:bean id="dubboAop" class="com.thinkwin.web.DubboServiceContextAop" />
    <aop:config>
        <aop:aspect id="dubboAspect" ref="dubboAop" >

            <aop:before method="dubboContext" pointcut-ref="pointCutBefore" />

        </aop:aspect>

    </aop:config>


    <!-- 登录失败后业务处理 -->
    <beans:bean id="failureHandler"
                class="com.xxxx.web.security.LoginAuthenticationFailureHandler">
        <beans:property name="userService"  ref="userService"></beans:property>
        <beans:property name="sysLogService"  ref="sysLogService"></beans:property>
        <beans:property name="loginRegisterService"  ref="loginRegisterService"></beans:property>
    </beans:bean>   <!-- 登录成功业务处理 -->
    <beans:bean id="successHandler"      class="com.web.security.LoginAuthenticationSuccesssHandler">
        <beans:property name="loginRegisterService"  ref="loginRegisterService"></beans:property>
        <beans:property name="sysLogService"  ref="sysLogService"></beans:property>
        <beans:property name="userService"  ref="userService"></beans:property>
        <beans:property name="saasTenantService"  ref="saasTenantCoreService"></beans:property>
        <beans:property name="defaultUrl" value="/index.do"></beans:property>
        <!-- 可变换登录成功后的路径，验证用户是否拥有该权限 -->
    </beans:bean
    >   <!-- 自定义过滤器 -->
    <beans:bean id="mySecurityFilter"      class="com.xxxx.web.security.MyFilterSecurityInterceptor">
    <beans:property name="accessDecisionManager" ref="accessDescisionManager"></beans:property>
        <beans:property name="fisMetadataSource" ref="securityMetadataSource"></beans:property>
        <beans:property name="authenticationManager" ref="authManager"></beans:property>
    </beans:bean>   <beans:bean id="securityMetadataSource"      class="com.xxxx.web.security.MySecurityMetadataSource">
    <beans:constructor-arg name="rolePermissionService" ref="rolePermissionService"></beans:constructor-arg>
</beans:bean>
    <beans:bean id="accessDescisionManager"      class="com.xxxx.web.security.MyAccessDescisionManager">
    </beans:bean>
    <beans:bean id="userServiceDetail"      class="com.xx.web.security.MyUserDetailServiceImpl">
    <beans:property name="userService" ref="userService"></beans:property>
        <beans:property name="rolePermissionService" ref="rolePermissionService">         </beans:property>
        <beans:property name="permissionService" ref="permissionService">      </beans:property>
        <beans:property name="userRoleService" ref="userRoleService">      </beans:property>
        <beans:property name="loginRegisterService" ref="saasTenantCoreService">      </beans:property>
    </beans:bean>
</beans:beans>